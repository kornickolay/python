# Задача - 1
# Ранее мы с вами уже писали игру, используя словари в качестве
# структур данных для нашего игрока и врага, давайте сделаем новую, но уже с ООП
# Опишите базовый класс Person, подумайте какие общие данные есть и у врага и у игрока
# Не забудьте, что у них есть помимо общих аттрибутов и общие методы.
# Теперь наследуясь от Person создайте 2 класса Player, Enemy.
# У каждой сущности должы быть аттрибуты health, damage, armor
# У каждой сущности должно быть 2 метода, один для подсчета урона, с учетом брони противника,
# второй для атаки противника.
# Функция подсчета урона должна быть инкапсулирована
# Вам надо описать игровой цикл так же через класс.
# Создайте экземпляры классов, проведите бой. Кто будет атаковать первым оставляю на ваше усмотрение.

class Person():
    # при инициализации базового и люобого дочернего класса на вход в качестве аргумента подаётся имя
    def __init__(self, input_name):
        self.name = input_name
        self.armor = 0
        self.damage = 0
        self.health = 0

    # функция записи атрибутов, прочитанных в файле, который состоит из одной строки "int,int,float"
    def read_character(self, file_string):
        f = open(file_string)
        data = f.readline().split(',')
        self.health = int(data[0])
        self.damage = int(data[1])
        self.armor = float(data[2])
        f.close()

    # метод, принимающий на вход урон от соперника и armor текущего объекта
    def attacked(self, d):
        self.health -= (d / self.armor)

    # метод для атаки противника, возвращает damage. Честно, смысла в этой функции не вижу,
    # поскольку атакующая сторона ничего не теряет и ничего не получает в результате атаки
    def attacking(self):
        return self.damage


class Player(Person):
    pass  # все атрибуты и методы передаются из родительского класса, дополнительных нет


class Enemy(Person):
    # У врага есть метод, который позволяет инициализировать его атрибуты в зависимости от уровня сложности level.
    # Этот метод обращается к другому методу, но уже базового класса read_character
    def know_level(self):
        level = 0
        while not (level in [1, 2]):  # пока пользователь на нажмёт 1 или 2, игра не начнётся
            level = int(input('Выберите уровень сложности(1-2)'))
        if level == 1:  # если выбран первый уровень сложности, то врагу даются характеристики из первого файла
            self.read_character('enemy_level1.txt')
        elif level == 2:  # если выбран второй уровень сложности, то врагу даются характеристики из первого файла
            self.read_character('enemy_level2.txt')
        else:
            pass  # можно позже обработать неправильный ввод, но и без него будет просить ввести уровень заново.


class MyGame():
    # описание игрового цикла через класс
    def start_game(self):
        # инициализация игрока
        player = Player(input('Введите ваше имя: '))
        player.read_character('player.txt')
        # инициализация врага
        enemy = Enemy('Dracula')
        enemy.know_level()  # запрашивает уровень сложности и запускает read_character из нужного файла
        while True:
            move = input('Кто кого атакует?\n 1 - игрок.\n 2 - враг\n 0 - закончить игру')
            if move == '0': # Принудительное завершение игры
                break
            elif move == '1': # атакует игрок
                enemy.attacked(player.attacking())
            elif move == '2': # атакует враг
                player.attacked(enemy.attacking())
            else:
                pass  # ошибочный ввод можно будет обработать позже по тех.заданию
            if player.health <= 0:
                print('Победил враг! Остаток его здоровья:', int(enemy.health))
                break  # завершение игры, если игрок умер, иначе новая атака
            if enemy.health <= 0:
                print('Вы победили! Остаток вашего здоровья:', int(player.health))
                break  # завершение игры, если один из соперников умер, иначе новая атака
        print('_______________\nВаш уровень здоровья: ', int(player.health), '\nУровень здоровья врага: ',
              int(enemy.health), '\n_______________')


def main():
    print('Игра началась!')
    game = MyGame()
    game.start_game()
    print('Game Over!')


if __name__ == '__main__':
    main()
