# Задание-1: уравнение прямой вида y = kx + b задано в виде строки.
# Определить координату y точки с заданной координатой x.
print('Задание №1\n------------------------')
equation = 'y = -12x - 11111140.2121'
x = 2.5
# вычислите и выведите y
sign = -1  # если перед b стоит знак "-", то будем b умножать на -1
equation = equation[4:]  # отбрасываем первые 4 символа
k = float(equation[:(equation.find('x'))])  # находим х срезом достаём k
if equation[equation.find(' ') + 1] == '+':
    sign = 1  # если стоит знак +, то b - положительное число
b = float(
    equation[equation.find(' ') + 3:])  # находим первый пробел, сдвигаем на 3 символа и срезаем оставшуюся часть b
y = k * x + sign * b
print('Значение функции y в точке х =', x, ':', y)
print('------------------------\n')

# Задание-2: Дата задана в виде строки формата 'dd.mm.yyyy'.
# Проверить, корректно ли введена дата.
# Условия корректности:
# 1. День должен приводиться к целому числу в диапазоне от 1 до 30(31)
#  (в зависимости от месяца, февраль не учитываем)
# 2. Месяц должен приводиться к целому числу в диапазоне от 1 до 12
# 3. Год должен приводиться к целому положительному числу в диапазоне от 1 до 9999
# 4. Длина исходной строки для частей должна быть в соответствии с форматом
#  (т.е. 2 символа для дня, 2 - для месяца, 4 - для года)

# Пример корректной даты
Date = '01.11.1985'

# Примеры некорректных дат
# Date = '01.22.1001'
# Date = '1.12.1001'
# Date = '-2.10.3001'

print('Задание №2\n------------------------')
Date = Date.split('.')
# проверяем: 1) два знака - день, два знака - месяц, четыре знака - год;
#            2) является ли каждая часть введённых данных положительным числом;
#            3) проверяем, подходят ли числа по диапазону.
# Если да, выводим результат.
if len(Date[0]) == 2 and len(Date[1]) == 2 and len(Date[2]) == 4 and Date[0].isdigit() and Date[1].isdigit() and Date[
    2].isdigit() and (0 < int(Date[0]) <= 31) and (
        0 < int(Date[1]) <= 12) and int(Date[2]) != 0:
    print('Дата введена корректно!')
else:
    # если нет, выводим сообщение об ошибке ввода.
    print('Ошибка ввода даты!')
print('------------------------\n')

# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ? N ? 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3
print('Задание №3\n------------------------')
MAX_ROOM = 2 * 10 ** 9
Room = int(input('Вход (номер комнаты):'))
if Room == 0 or Room > MAX_ROOM:
    print('Такой квартиры не существует!')
else:
    i = 1
    Count = 1  # назовём это число степенью блока увеличивающихся вверх квадратов
    Max_floor_count = 1  # максимальный этаж в блоке count x count
    Floor = 1  # Счетчик этажей
    Row = 1  # Счетчик, какая по счёту квартира на этаже
    while i < Room:  # счётчик останавливается на указанной квартире
        if Floor == Max_floor_count and Row == Count:  # если достигли потолка блока и квартира в ряду последняя,
            # то переходим к следующему блоку: изменяется размер блока на 1,
            # максимальный этаж в блоке увеличивается на размер блока, этаж увеличивается на 1, номер в ряду сбрасывается до 1
            Count += 1
            Max_floor_count += Count
            Row = 1
            Floor += 1
        elif Row < Count:  # иначе если не дошли до конца ряда, то сдвинулись по ряду дальше
            Row += 1
        else:  # а если дошли до конца ряда, то поднялись на этаж выше и номер в ряду сбросили до 1
            Floor += 1
            Row = 1
        i += 1

    print('Номер этажа: {}, квартира по счёту: {}'.format(Floor, Row))
