# Задание - 1
# Давайте опишем пару сущностей player и enemy через словарь,
# который будет иметь ключи и значения:
# name - строка полученная от пользователя,
# health - 100,
# damage - 50.
# Поэксперементируйте с значениями урона и жизней по желанию.
# Теперь надо создать функцию attack(person1, person2), аргументы можете указать свои,
# функция в качестве аргумента будет принимать атакующего и атакуемого,
# функция должна получить параметр damage атакующего и отнять это количество
# health от атакуемого. Функция должна сама работать с словарями и изменять их значения.

# Задание - 2
# Давайте усложним предыдущее задание, измените сущности, добавив новый параметр - armor = 1.2
# Теперь надо добавить функцию, которая будет вычислять и возвращать полученный урон по формуле damage / armor
# Следовательно у вас должно быть 2 функции, одна наносит урон, вторая вычисляет урон по отношению к броне.

# Сохраните эти сущности, полностью, каждую в свой файл,
# в качестве названия для файла использовать name, расширение .txt
# Напишите функцию, которая будет считывать файл игрока и его врага, получать оттуда данные, и записывать их в словари,
# после чего происходит запуск игровой сессии, где сущностям поочередно наносится урон,
# пока у одного из них health не станет меньше или равен 0.
# После чего на экран должно быть выведено имя победителя, и количество оставшихся единиц здоровья.


# Фунция принимает данные атакующего и атакуемого, возвращает атакуемого с учетом нанесённого повреждения
def attack(person1, person2):
    person2['health'] -= pro_damage(person1['damage'], person2['armor'])
    return person2


# принимает значения урона атакующего и защиты атакуемого. С учётом второго фактора возвращает новое значение атаки
def pro_damage(damage, armor):
    return damage / armor


# функция принимает на вход имя файла, возвращает объект, сформированный данными из файла
def read_character(file_string):
    character = {}
    f = open(file_string)
    data = f.readline().split(',')
    character['name'] = data[0]
    character['health'] = int(data[1])
    character['damage'] = int(data[2])
    character['armor'] = float(data[3])
    f.close()
    return character


player = read_character('player.txt')  # Формируем нашего игрока
# player = {'name': '', 'health': 0, 'damage': 0, 'armor': 1.2}
# enemy = {'name': 'Dracula', 'health': 0, 'damage': 0, 'armor': 1.2}
player['name'] = input('Ваше имя:')  # присваиваем нашему игроку имя по желанию
# player['health'] = 100
# player['damage'] = 50
level = 0
while not (level in [1, 2]):  # пока пользователь на нажмёт 1 или 2, игра не начнётся
    level = int(input('Выберите уровень сложности(1-2)'))
    # в зависимости от уровня сложности враг может быть слабее или сильнее
if level == 1:  # если выбран первый уровень сложности, то врагу даются характеристики из первого файла
    enemy = read_character('enemy_level1.txt')
    # enemy['health'] = 50
    # enemy['damage'] = 25
elif level == 2:  # если выбран второй уровень сложности, то врагу даются характеристики из первого файла
    enemy = read_character('enemy_level2.txt')
    # enemy['health'] = 90
    # enemy['damage'] = 45
else:
    pass # можно позже обработать неправильный ввод, но и без него будет просить ввести уровень заново.
print('Игра началась!')
while True:
    move = input('Кто кого атакует?\n 1 - игрок.\n 2 - враг\n 0 - закончить игру')
    if move == '0':
        break  # Принудительное завершение игры
    elif move == '1':
        enemy = attack(player, enemy)
    elif move == '2':
        player = attack(enemy, player)
    else:
        pass  # ошибочный ввод можно будет обработать позже по тех.заданию
    if player['health'] <= 0:
        print('Победил враг! Остаток его здоровья:', int(enemy['health']))
        break  # завершение игры, если игрок умер, иначе новая атака
    if enemy['health'] <= 0:
        print('Вы победили! Остаток вашего здоровья:', int(player['health']))
        break  # завершение игры, если один из соперников умер, иначе новая атака
print('_______________\n', player, '\n', enemy, '\n_______________')
print('Game Over!')

